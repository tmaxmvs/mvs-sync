// source: Struct.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Enum_pb = require('./Enum_pb.js');
goog.object.extend(proto, Enum_pb);
goog.exportSymbol('proto.Protocol.GroupID', null, global);
goog.exportSymbol('proto.Protocol.GroupInfo', null, global);
goog.exportSymbol('proto.Protocol.ObjectID', null, global);
goog.exportSymbol('proto.Protocol.ObjectInfo', null, global);
goog.exportSymbol('proto.Protocol.PlayerInfo', null, global);
goog.exportSymbol('proto.Protocol.RoomInfo', null, global);
goog.exportSymbol('proto.Protocol.Transform', null, global);
goog.exportSymbol('proto.Protocol.Vector3', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.PlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.PlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.PlayerInfo.displayName = 'proto.Protocol.PlayerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.RoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.RoomInfo.repeatedFields_, null);
};
goog.inherits(proto.Protocol.RoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.RoomInfo.displayName = 'proto.Protocol.RoomInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.GroupID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.GroupID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.GroupID.displayName = 'proto.Protocol.GroupID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.GroupInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.GroupInfo.repeatedFields_, null);
};
goog.inherits(proto.Protocol.GroupInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.GroupInfo.displayName = 'proto.Protocol.GroupInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.Vector3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.Vector3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.Vector3.displayName = 'proto.Protocol.Vector3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.Transform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.Transform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.Transform.displayName = 'proto.Protocol.Transform';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.ObjectID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.ObjectID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.ObjectID.displayName = 'proto.Protocol.ObjectID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.ObjectInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.ObjectInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.ObjectInfo.displayName = 'proto.Protocol.ObjectInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.PlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.PlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.PlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.PlayerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.PlayerInfo}
 */
proto.Protocol.PlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.PlayerInfo;
  return proto.Protocol.PlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.PlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.PlayerInfo}
 */
proto.Protocol.PlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.PlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.PlayerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.PlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.PlayerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 playerID = 1;
 * @return {number}
 */
proto.Protocol.PlayerInfo.prototype.getPlayerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.PlayerInfo} returns this
 */
proto.Protocol.PlayerInfo.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Protocol.PlayerInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.PlayerInfo} returns this
 */
proto.Protocol.PlayerInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.RoomInfo.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.RoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.RoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.RoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.RoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    playerinfosList: jspb.Message.toObjectList(msg.getPlayerinfosList(),
    proto.Protocol.PlayerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.RoomInfo}
 */
proto.Protocol.RoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.RoomInfo;
  return proto.Protocol.RoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.RoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.RoomInfo}
 */
proto.Protocol.RoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAppid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoomid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.Protocol.PlayerInfo;
      reader.readMessage(value,proto.Protocol.PlayerInfo.deserializeBinaryFromReader);
      msg.addPlayerinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.RoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.RoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.RoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.RoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRoomid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlayerinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Protocol.PlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 appID = 1;
 * @return {number}
 */
proto.Protocol.RoomInfo.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.RoomInfo} returns this
 */
proto.Protocol.RoomInfo.prototype.setAppid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 roomID = 2;
 * @return {number}
 */
proto.Protocol.RoomInfo.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.RoomInfo} returns this
 */
proto.Protocol.RoomInfo.prototype.setRoomid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.Protocol.RoomInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.RoomInfo} returns this
 */
proto.Protocol.RoomInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated PlayerInfo playerInfos = 4;
 * @return {!Array<!proto.Protocol.PlayerInfo>}
 */
proto.Protocol.RoomInfo.prototype.getPlayerinfosList = function() {
  return /** @type{!Array<!proto.Protocol.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Protocol.PlayerInfo, 4));
};


/**
 * @param {!Array<!proto.Protocol.PlayerInfo>} value
 * @return {!proto.Protocol.RoomInfo} returns this
*/
proto.Protocol.RoomInfo.prototype.setPlayerinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Protocol.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protocol.PlayerInfo}
 */
proto.Protocol.RoomInfo.prototype.addPlayerinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Protocol.PlayerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protocol.RoomInfo} returns this
 */
proto.Protocol.RoomInfo.prototype.clearPlayerinfosList = function() {
  return this.setPlayerinfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.GroupID.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.GroupID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.GroupID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.GroupID.toObject = function(includeInstance, msg) {
  var f, obj = {
    scenenumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channelid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.GroupID}
 */
proto.Protocol.GroupID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.GroupID;
  return proto.Protocol.GroupID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.GroupID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.GroupID}
 */
proto.Protocol.GroupID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScenenumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.GroupID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.GroupID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.GroupID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.GroupID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScenenumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getChannelid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 sceneNumber = 1;
 * @return {number}
 */
proto.Protocol.GroupID.prototype.getScenenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.GroupID} returns this
 */
proto.Protocol.GroupID.prototype.setScenenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 channelID = 2;
 * @return {number}
 */
proto.Protocol.GroupID.prototype.getChannelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.GroupID} returns this
 */
proto.Protocol.GroupID.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.GroupInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.GroupInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.GroupInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.GroupInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.GroupInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: (f = msg.getGroupid()) && proto.Protocol.GroupID.toObject(includeInstance, f),
    playerinfosList: jspb.Message.toObjectList(msg.getPlayerinfosList(),
    proto.Protocol.PlayerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.GroupInfo}
 */
proto.Protocol.GroupInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.GroupInfo;
  return proto.Protocol.GroupInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.GroupInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.GroupInfo}
 */
proto.Protocol.GroupInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protocol.GroupID;
      reader.readMessage(value,proto.Protocol.GroupID.deserializeBinaryFromReader);
      msg.setGroupid(value);
      break;
    case 2:
      var value = new proto.Protocol.PlayerInfo;
      reader.readMessage(value,proto.Protocol.PlayerInfo.deserializeBinaryFromReader);
      msg.addPlayerinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.GroupInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.GroupInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.GroupInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.GroupInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Protocol.GroupID.serializeBinaryToWriter
    );
  }
  f = message.getPlayerinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Protocol.PlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional GroupID groupID = 1;
 * @return {?proto.Protocol.GroupID}
 */
proto.Protocol.GroupInfo.prototype.getGroupid = function() {
  return /** @type{?proto.Protocol.GroupID} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.GroupID, 1));
};


/**
 * @param {?proto.Protocol.GroupID|undefined} value
 * @return {!proto.Protocol.GroupInfo} returns this
*/
proto.Protocol.GroupInfo.prototype.setGroupid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.GroupInfo} returns this
 */
proto.Protocol.GroupInfo.prototype.clearGroupid = function() {
  return this.setGroupid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.GroupInfo.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PlayerInfo playerInfos = 2;
 * @return {!Array<!proto.Protocol.PlayerInfo>}
 */
proto.Protocol.GroupInfo.prototype.getPlayerinfosList = function() {
  return /** @type{!Array<!proto.Protocol.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Protocol.PlayerInfo, 2));
};


/**
 * @param {!Array<!proto.Protocol.PlayerInfo>} value
 * @return {!proto.Protocol.GroupInfo} returns this
*/
proto.Protocol.GroupInfo.prototype.setPlayerinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Protocol.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protocol.PlayerInfo}
 */
proto.Protocol.GroupInfo.prototype.addPlayerinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Protocol.PlayerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protocol.GroupInfo} returns this
 */
proto.Protocol.GroupInfo.prototype.clearPlayerinfosList = function() {
  return this.setPlayerinfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.Vector3.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.Vector3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.Vector3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.Vector3.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.Vector3}
 */
proto.Protocol.Vector3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.Vector3;
  return proto.Protocol.Vector3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.Vector3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.Vector3}
 */
proto.Protocol.Vector3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.Vector3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.Vector3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.Vector3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.Vector3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.Protocol.Vector3.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.Vector3} returns this
 */
proto.Protocol.Vector3.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.Protocol.Vector3.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.Vector3} returns this
 */
proto.Protocol.Vector3.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.Protocol.Vector3.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.Vector3} returns this
 */
proto.Protocol.Vector3.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.Transform.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.Transform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.Transform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.Transform.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.Protocol.Vector3.toObject(includeInstance, f),
    rotation: (f = msg.getRotation()) && proto.Protocol.Vector3.toObject(includeInstance, f),
    scale: (f = msg.getScale()) && proto.Protocol.Vector3.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.Transform}
 */
proto.Protocol.Transform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.Transform;
  return proto.Protocol.Transform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.Transform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.Transform}
 */
proto.Protocol.Transform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protocol.Vector3;
      reader.readMessage(value,proto.Protocol.Vector3.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new proto.Protocol.Vector3;
      reader.readMessage(value,proto.Protocol.Vector3.deserializeBinaryFromReader);
      msg.setRotation(value);
      break;
    case 3:
      var value = new proto.Protocol.Vector3;
      reader.readMessage(value,proto.Protocol.Vector3.deserializeBinaryFromReader);
      msg.setScale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.Transform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.Transform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.Transform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.Transform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Protocol.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getRotation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Protocol.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getScale();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Protocol.Vector3.serializeBinaryToWriter
    );
  }
};


/**
 * optional Vector3 position = 1;
 * @return {?proto.Protocol.Vector3}
 */
proto.Protocol.Transform.prototype.getPosition = function() {
  return /** @type{?proto.Protocol.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.Vector3, 1));
};


/**
 * @param {?proto.Protocol.Vector3|undefined} value
 * @return {!proto.Protocol.Transform} returns this
*/
proto.Protocol.Transform.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.Transform} returns this
 */
proto.Protocol.Transform.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.Transform.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Vector3 rotation = 2;
 * @return {?proto.Protocol.Vector3}
 */
proto.Protocol.Transform.prototype.getRotation = function() {
  return /** @type{?proto.Protocol.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.Vector3, 2));
};


/**
 * @param {?proto.Protocol.Vector3|undefined} value
 * @return {!proto.Protocol.Transform} returns this
*/
proto.Protocol.Transform.prototype.setRotation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.Transform} returns this
 */
proto.Protocol.Transform.prototype.clearRotation = function() {
  return this.setRotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.Transform.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Vector3 scale = 3;
 * @return {?proto.Protocol.Vector3}
 */
proto.Protocol.Transform.prototype.getScale = function() {
  return /** @type{?proto.Protocol.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.Vector3, 3));
};


/**
 * @param {?proto.Protocol.Vector3|undefined} value
 * @return {!proto.Protocol.Transform} returns this
*/
proto.Protocol.Transform.prototype.setScale = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.Transform} returns this
 */
proto.Protocol.Transform.prototype.clearScale = function() {
  return this.setScale(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.Transform.prototype.hasScale = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.ObjectID.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.ObjectID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.ObjectID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.ObjectID.toObject = function(includeInstance, msg) {
  var f, obj = {
    prefabid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    instanceid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.ObjectID}
 */
proto.Protocol.ObjectID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.ObjectID;
  return proto.Protocol.ObjectID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.ObjectID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.ObjectID}
 */
proto.Protocol.ObjectID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrefabid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.ObjectID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.ObjectID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.ObjectID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.ObjectID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrefabid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 prefabID = 1;
 * @return {number}
 */
proto.Protocol.ObjectID.prototype.getPrefabid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.ObjectID} returns this
 */
proto.Protocol.ObjectID.prototype.setPrefabid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 instanceID = 2;
 * @return {number}
 */
proto.Protocol.ObjectID.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.ObjectID} returns this
 */
proto.Protocol.ObjectID.prototype.setInstanceid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.ObjectInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.ObjectInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.ObjectInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.ObjectInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    ownerplayerid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    objectid: (f = msg.getObjectid()) && proto.Protocol.ObjectID.toObject(includeInstance, f),
    transform: (f = msg.getTransform()) && proto.Protocol.Transform.toObject(includeInstance, f),
    visible: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.ObjectInfo}
 */
proto.Protocol.ObjectInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.ObjectInfo;
  return proto.Protocol.ObjectInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.ObjectInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.ObjectInfo}
 */
proto.Protocol.ObjectInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerplayerid(value);
      break;
    case 2:
      var value = new proto.Protocol.ObjectID;
      reader.readMessage(value,proto.Protocol.ObjectID.deserializeBinaryFromReader);
      msg.setObjectid(value);
      break;
    case 3:
      var value = new proto.Protocol.Transform;
      reader.readMessage(value,proto.Protocol.Transform.deserializeBinaryFromReader);
      msg.setTransform(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVisible(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.ObjectInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.ObjectInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.ObjectInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.ObjectInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwnerplayerid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getObjectid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Protocol.ObjectID.serializeBinaryToWriter
    );
  }
  f = message.getTransform();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Protocol.Transform.serializeBinaryToWriter
    );
  }
  f = message.getVisible();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint64 ownerPlayerID = 1;
 * @return {number}
 */
proto.Protocol.ObjectInfo.prototype.getOwnerplayerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.ObjectInfo} returns this
 */
proto.Protocol.ObjectInfo.prototype.setOwnerplayerid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ObjectID objectID = 2;
 * @return {?proto.Protocol.ObjectID}
 */
proto.Protocol.ObjectInfo.prototype.getObjectid = function() {
  return /** @type{?proto.Protocol.ObjectID} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.ObjectID, 2));
};


/**
 * @param {} value
 * @return {!proto.Protocol.ObjectInfo} returns this
*/
proto.Protocol.ObjectInfo.prototype.setObjectid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.ObjectInfo} returns this
 */
proto.Protocol.ObjectInfo.prototype.clearObjectid = function() {
  return this.setObjectid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.ObjectInfo.prototype.hasObjectid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Transform transform = 3;
 * @return {?proto.Protocol.Transform}
 */
proto.Protocol.ObjectInfo.prototype.getTransform = function() {
  return /** @type{?proto.Protocol.Transform} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.Transform, 3));
};


/**
 * @param {?proto.Protocol.Transform|undefined} value
 * @return {!proto.Protocol.ObjectInfo} returns this
*/
proto.Protocol.ObjectInfo.prototype.setTransform = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.ObjectInfo} returns this
 */
proto.Protocol.ObjectInfo.prototype.clearTransform = function() {
  return this.setTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.ObjectInfo.prototype.hasTransform = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool visible = 4;
 * @return {boolean}
 */
proto.Protocol.ObjectInfo.prototype.getVisible = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Protocol.ObjectInfo} returns this
 */
proto.Protocol.ObjectInfo.prototype.setVisible = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


goog.object.extend(exports, proto.Protocol);
