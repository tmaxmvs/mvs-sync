// source: Protocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Enum_pb = require('./Enum_pb.js');
goog.object.extend(proto, Enum_pb);
var Struct_pb = require('./Struct_pb.js');
goog.object.extend(proto, Struct_pb);
goog.exportSymbol('proto.Protocol.C_ADD_NETWORK_OBJECTS', null, global);
goog.exportSymbol('proto.Protocol.C_CHANGE_OBJECTS_OWNER', null, global);
goog.exportSymbol('proto.Protocol.C_CHAT', null, global);
goog.exportSymbol('proto.Protocol.C_GROUP_JOIN', null, global);
goog.exportSymbol('proto.Protocol.C_GROUP_LIST', null, global);
goog.exportSymbol('proto.Protocol.C_HEART_BEAT', null, global);
goog.exportSymbol('proto.Protocol.C_INITIAL_OBJECTS', null, global);
goog.exportSymbol('proto.Protocol.C_PLAYER_ID', null, global);
goog.exportSymbol('proto.Protocol.C_REMOVE_NETWORK_OBJECTS', null, global);
goog.exportSymbol('proto.Protocol.C_ROOM_JOIN', null, global);
goog.exportSymbol('proto.Protocol.C_TEST_ROOM_CREATE', null, global);
goog.exportSymbol('proto.Protocol.C_TEST_ROOM_LIST', null, global);
goog.exportSymbol('proto.Protocol.C_UPDATE_NETWORK_OBJECTS', null, global);
goog.exportSymbol('proto.Protocol.S_ADD_NETWORK_OBJECTS', null, global);
goog.exportSymbol('proto.Protocol.S_CHANGE_OBJECTS_OWNER', null, global);
goog.exportSymbol('proto.Protocol.S_CHAT', null, global);
goog.exportSymbol('proto.Protocol.S_GROUP_JOIN', null, global);
goog.exportSymbol('proto.Protocol.S_GROUP_LIST', null, global);
goog.exportSymbol('proto.Protocol.S_HEART_BEAT', null, global);
goog.exportSymbol('proto.Protocol.S_INITIAL_OBJECTS', null, global);
goog.exportSymbol('proto.Protocol.S_OTHER_CLIENT_JOINED', null, global);
goog.exportSymbol('proto.Protocol.S_PLAYER_ID', null, global);
goog.exportSymbol('proto.Protocol.S_REMOVE_NETWORK_OBJECTS', null, global);
goog.exportSymbol('proto.Protocol.S_ROOM_JOIN', null, global);
goog.exportSymbol('proto.Protocol.S_TEST_ROOM_CREATE', null, global);
goog.exportSymbol('proto.Protocol.S_TEST_ROOM_LIST', null, global);
goog.exportSymbol('proto.Protocol.S_UPDATE_NETWORK_OBJECTS', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.C_HEART_BEAT = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.C_HEART_BEAT, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.C_HEART_BEAT.displayName = 'proto.Protocol.C_HEART_BEAT';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.S_HEART_BEAT = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.S_HEART_BEAT, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.S_HEART_BEAT.displayName = 'proto.Protocol.S_HEART_BEAT';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.C_TEST_ROOM_CREATE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.C_TEST_ROOM_CREATE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.C_TEST_ROOM_CREATE.displayName = 'proto.Protocol.C_TEST_ROOM_CREATE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.S_TEST_ROOM_CREATE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.S_TEST_ROOM_CREATE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.S_TEST_ROOM_CREATE.displayName = 'proto.Protocol.S_TEST_ROOM_CREATE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.C_TEST_ROOM_LIST = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.C_TEST_ROOM_LIST, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.C_TEST_ROOM_LIST.displayName = 'proto.Protocol.C_TEST_ROOM_LIST';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.S_TEST_ROOM_LIST = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.S_TEST_ROOM_LIST.repeatedFields_, null);
};
goog.inherits(proto.Protocol.S_TEST_ROOM_LIST, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.S_TEST_ROOM_LIST.displayName = 'proto.Protocol.S_TEST_ROOM_LIST';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.C_ROOM_JOIN = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.C_ROOM_JOIN, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.C_ROOM_JOIN.displayName = 'proto.Protocol.C_ROOM_JOIN';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.S_ROOM_JOIN = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.S_ROOM_JOIN, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.S_ROOM_JOIN.displayName = 'proto.Protocol.S_ROOM_JOIN';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.C_PLAYER_ID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.C_PLAYER_ID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.C_PLAYER_ID.displayName = 'proto.Protocol.C_PLAYER_ID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.S_PLAYER_ID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.S_PLAYER_ID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.S_PLAYER_ID.displayName = 'proto.Protocol.S_PLAYER_ID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.C_GROUP_LIST = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.C_GROUP_LIST, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.C_GROUP_LIST.displayName = 'proto.Protocol.C_GROUP_LIST';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.S_GROUP_LIST = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.S_GROUP_LIST.repeatedFields_, null);
};
goog.inherits(proto.Protocol.S_GROUP_LIST, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.S_GROUP_LIST.displayName = 'proto.Protocol.S_GROUP_LIST';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.C_GROUP_JOIN = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.C_GROUP_JOIN, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.C_GROUP_JOIN.displayName = 'proto.Protocol.C_GROUP_JOIN';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.S_GROUP_JOIN = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.S_GROUP_JOIN, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.S_GROUP_JOIN.displayName = 'proto.Protocol.S_GROUP_JOIN';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.C_INITIAL_OBJECTS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.C_INITIAL_OBJECTS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.C_INITIAL_OBJECTS.displayName = 'proto.Protocol.C_INITIAL_OBJECTS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.S_INITIAL_OBJECTS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.S_INITIAL_OBJECTS.repeatedFields_, null);
};
goog.inherits(proto.Protocol.S_INITIAL_OBJECTS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.S_INITIAL_OBJECTS.displayName = 'proto.Protocol.S_INITIAL_OBJECTS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.S_OTHER_CLIENT_JOINED = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.S_OTHER_CLIENT_JOINED, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.S_OTHER_CLIENT_JOINED.displayName = 'proto.Protocol.S_OTHER_CLIENT_JOINED';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.C_ADD_NETWORK_OBJECTS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.C_ADD_NETWORK_OBJECTS.repeatedFields_, null);
};
goog.inherits(proto.Protocol.C_ADD_NETWORK_OBJECTS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.C_ADD_NETWORK_OBJECTS.displayName = 'proto.Protocol.C_ADD_NETWORK_OBJECTS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.S_ADD_NETWORK_OBJECTS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.S_ADD_NETWORK_OBJECTS.repeatedFields_, null);
};
goog.inherits(proto.Protocol.S_ADD_NETWORK_OBJECTS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.S_ADD_NETWORK_OBJECTS.displayName = 'proto.Protocol.S_ADD_NETWORK_OBJECTS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.C_REMOVE_NETWORK_OBJECTS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.C_REMOVE_NETWORK_OBJECTS.repeatedFields_, null);
};
goog.inherits(proto.Protocol.C_REMOVE_NETWORK_OBJECTS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.C_REMOVE_NETWORK_OBJECTS.displayName = 'proto.Protocol.C_REMOVE_NETWORK_OBJECTS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.S_REMOVE_NETWORK_OBJECTS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.S_REMOVE_NETWORK_OBJECTS.repeatedFields_, null);
};
goog.inherits(proto.Protocol.S_REMOVE_NETWORK_OBJECTS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.S_REMOVE_NETWORK_OBJECTS.displayName = 'proto.Protocol.S_REMOVE_NETWORK_OBJECTS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.C_UPDATE_NETWORK_OBJECTS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.C_UPDATE_NETWORK_OBJECTS.repeatedFields_, null);
};
goog.inherits(proto.Protocol.C_UPDATE_NETWORK_OBJECTS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.C_UPDATE_NETWORK_OBJECTS.displayName = 'proto.Protocol.C_UPDATE_NETWORK_OBJECTS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.S_UPDATE_NETWORK_OBJECTS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.S_UPDATE_NETWORK_OBJECTS.repeatedFields_, null);
};
goog.inherits(proto.Protocol.S_UPDATE_NETWORK_OBJECTS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.S_UPDATE_NETWORK_OBJECTS.displayName = 'proto.Protocol.S_UPDATE_NETWORK_OBJECTS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.C_CHANGE_OBJECTS_OWNER = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.C_CHANGE_OBJECTS_OWNER.repeatedFields_, null);
};
goog.inherits(proto.Protocol.C_CHANGE_OBJECTS_OWNER, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.C_CHANGE_OBJECTS_OWNER.displayName = 'proto.Protocol.C_CHANGE_OBJECTS_OWNER';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.S_CHANGE_OBJECTS_OWNER = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protocol.S_CHANGE_OBJECTS_OWNER.repeatedFields_, null);
};
goog.inherits(proto.Protocol.S_CHANGE_OBJECTS_OWNER, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.S_CHANGE_OBJECTS_OWNER.displayName = 'proto.Protocol.S_CHANGE_OBJECTS_OWNER';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.C_CHAT = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.C_CHAT, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.C_CHAT.displayName = 'proto.Protocol.C_CHAT';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.S_CHAT = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.S_CHAT, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.S_CHAT.displayName = 'proto.Protocol.S_CHAT';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.C_HEART_BEAT.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.C_HEART_BEAT.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.C_HEART_BEAT} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_HEART_BEAT.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.C_HEART_BEAT}
 */
proto.Protocol.C_HEART_BEAT.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.C_HEART_BEAT;
  return proto.Protocol.C_HEART_BEAT.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.C_HEART_BEAT} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.C_HEART_BEAT}
 */
proto.Protocol.C_HEART_BEAT.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.C_HEART_BEAT.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.C_HEART_BEAT.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.C_HEART_BEAT} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_HEART_BEAT.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.S_HEART_BEAT.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.S_HEART_BEAT.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.S_HEART_BEAT} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_HEART_BEAT.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.S_HEART_BEAT}
 */
proto.Protocol.S_HEART_BEAT.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.S_HEART_BEAT;
  return proto.Protocol.S_HEART_BEAT.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.S_HEART_BEAT} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.S_HEART_BEAT}
 */
proto.Protocol.S_HEART_BEAT.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.Protocol.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.S_HEART_BEAT.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.S_HEART_BEAT.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.S_HEART_BEAT} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_HEART_BEAT.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Result result = 2;
 * @return {!proto.Protocol.Result}
 */
proto.Protocol.S_HEART_BEAT.prototype.getResult = function() {
  return /** @type {!proto.Protocol.Result} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Protocol.Result} value
 * @return {!proto.Protocol.S_HEART_BEAT} returns this
 */
proto.Protocol.S_HEART_BEAT.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.C_TEST_ROOM_CREATE.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.C_TEST_ROOM_CREATE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.C_TEST_ROOM_CREATE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_TEST_ROOM_CREATE.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    waplroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.C_TEST_ROOM_CREATE}
 */
proto.Protocol.C_TEST_ROOM_CREATE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.C_TEST_ROOM_CREATE;
  return proto.Protocol.C_TEST_ROOM_CREATE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.C_TEST_ROOM_CREATE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.C_TEST_ROOM_CREATE}
 */
proto.Protocol.C_TEST_ROOM_CREATE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAppid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWaplroomid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.C_TEST_ROOM_CREATE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.C_TEST_ROOM_CREATE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.C_TEST_ROOM_CREATE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_TEST_ROOM_CREATE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getWaplroomid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint64 appID = 1;
 * @return {number}
 */
proto.Protocol.C_TEST_ROOM_CREATE.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.C_TEST_ROOM_CREATE} returns this
 */
proto.Protocol.C_TEST_ROOM_CREATE.prototype.setAppid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 waplRoomID = 2;
 * @return {number}
 */
proto.Protocol.C_TEST_ROOM_CREATE.prototype.getWaplroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.C_TEST_ROOM_CREATE} returns this
 */
proto.Protocol.C_TEST_ROOM_CREATE.prototype.setWaplroomid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.Protocol.C_TEST_ROOM_CREATE.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.C_TEST_ROOM_CREATE} returns this
 */
proto.Protocol.C_TEST_ROOM_CREATE.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.S_TEST_ROOM_CREATE.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.S_TEST_ROOM_CREATE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.S_TEST_ROOM_CREATE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_TEST_ROOM_CREATE.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    waplroomid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    result: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.S_TEST_ROOM_CREATE}
 */
proto.Protocol.S_TEST_ROOM_CREATE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.S_TEST_ROOM_CREATE;
  return proto.Protocol.S_TEST_ROOM_CREATE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.S_TEST_ROOM_CREATE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.S_TEST_ROOM_CREATE}
 */
proto.Protocol.S_TEST_ROOM_CREATE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAppid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWaplroomid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {!proto.Protocol.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.S_TEST_ROOM_CREATE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.S_TEST_ROOM_CREATE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.S_TEST_ROOM_CREATE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_TEST_ROOM_CREATE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getWaplroomid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional uint64 appID = 1;
 * @return {number}
 */
proto.Protocol.S_TEST_ROOM_CREATE.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.S_TEST_ROOM_CREATE} returns this
 */
proto.Protocol.S_TEST_ROOM_CREATE.prototype.setAppid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 waplRoomID = 2;
 * @return {number}
 */
proto.Protocol.S_TEST_ROOM_CREATE.prototype.getWaplroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.S_TEST_ROOM_CREATE} returns this
 */
proto.Protocol.S_TEST_ROOM_CREATE.prototype.setWaplroomid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.Protocol.S_TEST_ROOM_CREATE.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.S_TEST_ROOM_CREATE} returns this
 */
proto.Protocol.S_TEST_ROOM_CREATE.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Result result = 4;
 * @return {!proto.Protocol.Result}
 */
proto.Protocol.S_TEST_ROOM_CREATE.prototype.getResult = function() {
  return /** @type {!proto.Protocol.Result} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.Protocol.Result} value
 * @return {!proto.Protocol.S_TEST_ROOM_CREATE} returns this
 */
proto.Protocol.S_TEST_ROOM_CREATE.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.C_TEST_ROOM_LIST.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.C_TEST_ROOM_LIST.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.C_TEST_ROOM_LIST} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_TEST_ROOM_LIST.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.C_TEST_ROOM_LIST}
 */
proto.Protocol.C_TEST_ROOM_LIST.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.C_TEST_ROOM_LIST;
  return proto.Protocol.C_TEST_ROOM_LIST.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.C_TEST_ROOM_LIST} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.C_TEST_ROOM_LIST}
 */
proto.Protocol.C_TEST_ROOM_LIST.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.C_TEST_ROOM_LIST.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.C_TEST_ROOM_LIST.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.C_TEST_ROOM_LIST} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_TEST_ROOM_LIST.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.S_TEST_ROOM_LIST.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.S_TEST_ROOM_LIST.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.S_TEST_ROOM_LIST.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.S_TEST_ROOM_LIST} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_TEST_ROOM_LIST.toObject = function(includeInstance, msg) {
  var f, obj = {
    roominfosList: jspb.Message.toObjectList(msg.getRoominfosList(),
    Struct_pb.RoomInfo.toObject, includeInstance),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.S_TEST_ROOM_LIST}
 */
proto.Protocol.S_TEST_ROOM_LIST.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.S_TEST_ROOM_LIST;
  return proto.Protocol.S_TEST_ROOM_LIST.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.S_TEST_ROOM_LIST} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.S_TEST_ROOM_LIST}
 */
proto.Protocol.S_TEST_ROOM_LIST.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.RoomInfo;
      reader.readMessage(value,Struct_pb.RoomInfo.deserializeBinaryFromReader);
      msg.addRoominfos(value);
      break;
    case 2:
      var value = /** @type {!proto.Protocol.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.S_TEST_ROOM_LIST.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.S_TEST_ROOM_LIST.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.S_TEST_ROOM_LIST} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_TEST_ROOM_LIST.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoominfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.RoomInfo.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated RoomInfo roomInfos = 1;
 * @return {!Array<!proto.Protocol.RoomInfo>}
 */
proto.Protocol.S_TEST_ROOM_LIST.prototype.getRoominfosList = function() {
  return /** @type{!Array<!proto.Protocol.RoomInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.RoomInfo, 1));
};


/**
 * @param {!Array<!proto.Protocol.RoomInfo>} value
 * @return {!proto.Protocol.S_TEST_ROOM_LIST} returns this
*/
proto.Protocol.S_TEST_ROOM_LIST.prototype.setRoominfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protocol.RoomInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protocol.RoomInfo}
 */
proto.Protocol.S_TEST_ROOM_LIST.prototype.addRoominfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protocol.RoomInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protocol.S_TEST_ROOM_LIST} returns this
 */
proto.Protocol.S_TEST_ROOM_LIST.prototype.clearRoominfosList = function() {
  return this.setRoominfosList([]);
};


/**
 * optional Result result = 2;
 * @return {!proto.Protocol.Result}
 */
proto.Protocol.S_TEST_ROOM_LIST.prototype.getResult = function() {
  return /** @type {!proto.Protocol.Result} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Protocol.Result} value
 * @return {!proto.Protocol.S_TEST_ROOM_LIST} returns this
 */
proto.Protocol.S_TEST_ROOM_LIST.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.C_ROOM_JOIN.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.C_ROOM_JOIN.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.C_ROOM_JOIN} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_ROOM_JOIN.toObject = function(includeInstance, msg) {
  var f, obj = {
    waplroomid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.C_ROOM_JOIN}
 */
proto.Protocol.C_ROOM_JOIN.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.C_ROOM_JOIN;
  return proto.Protocol.C_ROOM_JOIN.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.C_ROOM_JOIN} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.C_ROOM_JOIN}
 */
proto.Protocol.C_ROOM_JOIN.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWaplroomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.C_ROOM_JOIN.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.C_ROOM_JOIN.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.C_ROOM_JOIN} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_ROOM_JOIN.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWaplroomid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 waplRoomID = 1;
 * @return {number}
 */
proto.Protocol.C_ROOM_JOIN.prototype.getWaplroomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.C_ROOM_JOIN} returns this
 */
proto.Protocol.C_ROOM_JOIN.prototype.setWaplroomid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.S_ROOM_JOIN.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.S_ROOM_JOIN.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.S_ROOM_JOIN} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_ROOM_JOIN.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.S_ROOM_JOIN}
 */
proto.Protocol.S_ROOM_JOIN.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.S_ROOM_JOIN;
  return proto.Protocol.S_ROOM_JOIN.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.S_ROOM_JOIN} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.S_ROOM_JOIN}
 */
proto.Protocol.S_ROOM_JOIN.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Protocol.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.S_ROOM_JOIN.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.S_ROOM_JOIN.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.S_ROOM_JOIN} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_ROOM_JOIN.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Result result = 1;
 * @return {!proto.Protocol.Result}
 */
proto.Protocol.S_ROOM_JOIN.prototype.getResult = function() {
  return /** @type {!proto.Protocol.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Protocol.Result} value
 * @return {!proto.Protocol.S_ROOM_JOIN} returns this
 */
proto.Protocol.S_ROOM_JOIN.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.C_PLAYER_ID.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.C_PLAYER_ID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.C_PLAYER_ID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_PLAYER_ID.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.C_PLAYER_ID}
 */
proto.Protocol.C_PLAYER_ID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.C_PLAYER_ID;
  return proto.Protocol.C_PLAYER_ID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.C_PLAYER_ID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.C_PLAYER_ID}
 */
proto.Protocol.C_PLAYER_ID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.C_PLAYER_ID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.C_PLAYER_ID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.C_PLAYER_ID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_PLAYER_ID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.S_PLAYER_ID.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.S_PLAYER_ID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.S_PLAYER_ID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_PLAYER_ID.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.S_PLAYER_ID}
 */
proto.Protocol.S_PLAYER_ID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.S_PLAYER_ID;
  return proto.Protocol.S_PLAYER_ID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.S_PLAYER_ID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.S_PLAYER_ID}
 */
proto.Protocol.S_PLAYER_ID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {!proto.Protocol.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.S_PLAYER_ID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.S_PLAYER_ID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.S_PLAYER_ID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_PLAYER_ID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint64 playerID = 1;
 * @return {number}
 */
proto.Protocol.S_PLAYER_ID.prototype.getPlayerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.S_PLAYER_ID} returns this
 */
proto.Protocol.S_PLAYER_ID.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Result result = 2;
 * @return {!proto.Protocol.Result}
 */
proto.Protocol.S_PLAYER_ID.prototype.getResult = function() {
  return /** @type {!proto.Protocol.Result} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Protocol.Result} value
 * @return {!proto.Protocol.S_PLAYER_ID} returns this
 */
proto.Protocol.S_PLAYER_ID.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.C_GROUP_LIST.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.C_GROUP_LIST.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.C_GROUP_LIST} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_GROUP_LIST.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.C_GROUP_LIST}
 */
proto.Protocol.C_GROUP_LIST.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.C_GROUP_LIST;
  return proto.Protocol.C_GROUP_LIST.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.C_GROUP_LIST} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.C_GROUP_LIST}
 */
proto.Protocol.C_GROUP_LIST.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.C_GROUP_LIST.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.C_GROUP_LIST.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.C_GROUP_LIST} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_GROUP_LIST.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.S_GROUP_LIST.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.S_GROUP_LIST.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.S_GROUP_LIST.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.S_GROUP_LIST} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_GROUP_LIST.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupinfosList: jspb.Message.toObjectList(msg.getGroupinfosList(),
    Struct_pb.GroupInfo.toObject, includeInstance),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.S_GROUP_LIST}
 */
proto.Protocol.S_GROUP_LIST.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.S_GROUP_LIST;
  return proto.Protocol.S_GROUP_LIST.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.S_GROUP_LIST} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.S_GROUP_LIST}
 */
proto.Protocol.S_GROUP_LIST.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.GroupInfo;
      reader.readMessage(value,Struct_pb.GroupInfo.deserializeBinaryFromReader);
      msg.addGroupinfos(value);
      break;
    case 2:
      var value = /** @type {!proto.Protocol.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.S_GROUP_LIST.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.S_GROUP_LIST.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.S_GROUP_LIST} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_GROUP_LIST.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.GroupInfo.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated GroupInfo groupInfos = 1;
 * @return {!Array<!proto.Protocol.GroupInfo>}
 */
proto.Protocol.S_GROUP_LIST.prototype.getGroupinfosList = function() {
  return /** @type{!Array<!proto.Protocol.GroupInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.GroupInfo, 1));
};


/**
 * @param {!Array<!proto.Protocol.GroupInfo>} value
 * @return {!proto.Protocol.S_GROUP_LIST} returns this
*/
proto.Protocol.S_GROUP_LIST.prototype.setGroupinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protocol.GroupInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protocol.GroupInfo}
 */
proto.Protocol.S_GROUP_LIST.prototype.addGroupinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protocol.GroupInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protocol.S_GROUP_LIST} returns this
 */
proto.Protocol.S_GROUP_LIST.prototype.clearGroupinfosList = function() {
  return this.setGroupinfosList([]);
};


/**
 * optional Result result = 2;
 * @return {!proto.Protocol.Result}
 */
proto.Protocol.S_GROUP_LIST.prototype.getResult = function() {
  return /** @type {!proto.Protocol.Result} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Protocol.Result} value
 * @return {!proto.Protocol.S_GROUP_LIST} returns this
 */
proto.Protocol.S_GROUP_LIST.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.C_GROUP_JOIN.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.C_GROUP_JOIN.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.C_GROUP_JOIN} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_GROUP_JOIN.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: (f = msg.getGroupid()) && Struct_pb.GroupID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.C_GROUP_JOIN}
 */
proto.Protocol.C_GROUP_JOIN.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.C_GROUP_JOIN;
  return proto.Protocol.C_GROUP_JOIN.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.C_GROUP_JOIN} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.C_GROUP_JOIN}
 */
proto.Protocol.C_GROUP_JOIN.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.GroupID;
      reader.readMessage(value,Struct_pb.GroupID.deserializeBinaryFromReader);
      msg.setGroupid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.C_GROUP_JOIN.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.C_GROUP_JOIN.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.C_GROUP_JOIN} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_GROUP_JOIN.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Struct_pb.GroupID.serializeBinaryToWriter
    );
  }
};


/**
 * optional GroupID groupID = 1;
 * @return {?proto.Protocol.GroupID}
 */
proto.Protocol.C_GROUP_JOIN.prototype.getGroupid = function() {
  return /** @type{?proto.Protocol.GroupID} */ (
    jspb.Message.getWrapperField(this, Struct_pb.GroupID, 1));
};


/**
 * @param {?proto.Protocol.GroupID|undefined} value
 * @return {!proto.Protocol.C_GROUP_JOIN} returns this
*/
proto.Protocol.C_GROUP_JOIN.prototype.setGroupid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.C_GROUP_JOIN} returns this
 */
proto.Protocol.C_GROUP_JOIN.prototype.clearGroupid = function() {
  return this.setGroupid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.C_GROUP_JOIN.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.S_GROUP_JOIN.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.S_GROUP_JOIN.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.S_GROUP_JOIN} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_GROUP_JOIN.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupinfo: (f = msg.getGroupinfo()) && Struct_pb.GroupInfo.toObject(includeInstance, f),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.S_GROUP_JOIN}
 */
proto.Protocol.S_GROUP_JOIN.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.S_GROUP_JOIN;
  return proto.Protocol.S_GROUP_JOIN.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.S_GROUP_JOIN} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.S_GROUP_JOIN}
 */
proto.Protocol.S_GROUP_JOIN.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.GroupInfo;
      reader.readMessage(value,Struct_pb.GroupInfo.deserializeBinaryFromReader);
      msg.setGroupinfo(value);
      break;
    case 2:
      var value = /** @type {!proto.Protocol.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.S_GROUP_JOIN.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.S_GROUP_JOIN.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.S_GROUP_JOIN} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_GROUP_JOIN.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Struct_pb.GroupInfo.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional GroupInfo groupInfo = 1;
 * @return {?proto.Protocol.GroupInfo}
 */
proto.Protocol.S_GROUP_JOIN.prototype.getGroupinfo = function() {
  return /** @type{?proto.Protocol.GroupInfo} */ (
    jspb.Message.getWrapperField(this, Struct_pb.GroupInfo, 1));
};


/**
 * @param {?proto.Protocol.GroupInfo|undefined} value
 * @return {!proto.Protocol.S_GROUP_JOIN} returns this
*/
proto.Protocol.S_GROUP_JOIN.prototype.setGroupinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.S_GROUP_JOIN} returns this
 */
proto.Protocol.S_GROUP_JOIN.prototype.clearGroupinfo = function() {
  return this.setGroupinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.S_GROUP_JOIN.prototype.hasGroupinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Result result = 2;
 * @return {!proto.Protocol.Result}
 */
proto.Protocol.S_GROUP_JOIN.prototype.getResult = function() {
  return /** @type {!proto.Protocol.Result} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Protocol.Result} value
 * @return {!proto.Protocol.S_GROUP_JOIN} returns this
 */
proto.Protocol.S_GROUP_JOIN.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.C_INITIAL_OBJECTS.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.C_INITIAL_OBJECTS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.C_INITIAL_OBJECTS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_INITIAL_OBJECTS.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.C_INITIAL_OBJECTS}
 */
proto.Protocol.C_INITIAL_OBJECTS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.C_INITIAL_OBJECTS;
  return proto.Protocol.C_INITIAL_OBJECTS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.C_INITIAL_OBJECTS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.C_INITIAL_OBJECTS}
 */
proto.Protocol.C_INITIAL_OBJECTS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.C_INITIAL_OBJECTS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.C_INITIAL_OBJECTS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.C_INITIAL_OBJECTS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_INITIAL_OBJECTS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.S_INITIAL_OBJECTS.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.S_INITIAL_OBJECTS.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.S_INITIAL_OBJECTS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.S_INITIAL_OBJECTS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_INITIAL_OBJECTS.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectinfosList: jspb.Message.toObjectList(msg.getObjectinfosList(),
    Struct_pb.ObjectInfo.toObject, includeInstance),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.S_INITIAL_OBJECTS}
 */
proto.Protocol.S_INITIAL_OBJECTS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.S_INITIAL_OBJECTS;
  return proto.Protocol.S_INITIAL_OBJECTS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.S_INITIAL_OBJECTS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.S_INITIAL_OBJECTS}
 */
proto.Protocol.S_INITIAL_OBJECTS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.ObjectInfo;
      reader.readMessage(value,Struct_pb.ObjectInfo.deserializeBinaryFromReader);
      msg.addObjectinfos(value);
      break;
    case 2:
      var value = /** @type {!proto.Protocol.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.S_INITIAL_OBJECTS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.S_INITIAL_OBJECTS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.S_INITIAL_OBJECTS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_INITIAL_OBJECTS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.ObjectInfo.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated ObjectInfo objectInfos = 1;
 * @return {!Array<!proto.Protocol.ObjectInfo>}
 */
proto.Protocol.S_INITIAL_OBJECTS.prototype.getObjectinfosList = function() {
  return /** @type{!Array<!proto.Protocol.ObjectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.ObjectInfo, 1));
};


/**
 * @param {!Array<!proto.Protocol.ObjectInfo>} value
 * @return {!proto.Protocol.S_INITIAL_OBJECTS} returns this
*/
proto.Protocol.S_INITIAL_OBJECTS.prototype.setObjectinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protocol.ObjectInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protocol.ObjectInfo}
 */
proto.Protocol.S_INITIAL_OBJECTS.prototype.addObjectinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protocol.ObjectInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protocol.S_INITIAL_OBJECTS} returns this
 */
proto.Protocol.S_INITIAL_OBJECTS.prototype.clearObjectinfosList = function() {
  return this.setObjectinfosList([]);
};


/**
 * optional Result result = 2;
 * @return {!proto.Protocol.Result}
 */
proto.Protocol.S_INITIAL_OBJECTS.prototype.getResult = function() {
  return /** @type {!proto.Protocol.Result} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Protocol.Result} value
 * @return {!proto.Protocol.S_INITIAL_OBJECTS} returns this
 */
proto.Protocol.S_INITIAL_OBJECTS.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.S_OTHER_CLIENT_JOINED.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.S_OTHER_CLIENT_JOINED.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.S_OTHER_CLIENT_JOINED} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_OTHER_CLIENT_JOINED.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerinfo: (f = msg.getPlayerinfo()) && Struct_pb.PlayerInfo.toObject(includeInstance, f),
    groupid: (f = msg.getGroupid()) && Struct_pb.GroupID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.S_OTHER_CLIENT_JOINED}
 */
proto.Protocol.S_OTHER_CLIENT_JOINED.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.S_OTHER_CLIENT_JOINED;
  return proto.Protocol.S_OTHER_CLIENT_JOINED.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.S_OTHER_CLIENT_JOINED} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.S_OTHER_CLIENT_JOINED}
 */
proto.Protocol.S_OTHER_CLIENT_JOINED.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.PlayerInfo;
      reader.readMessage(value,Struct_pb.PlayerInfo.deserializeBinaryFromReader);
      msg.setPlayerinfo(value);
      break;
    case 2:
      var value = new Struct_pb.GroupID;
      reader.readMessage(value,Struct_pb.GroupID.deserializeBinaryFromReader);
      msg.setGroupid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.S_OTHER_CLIENT_JOINED.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.S_OTHER_CLIENT_JOINED.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.S_OTHER_CLIENT_JOINED} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_OTHER_CLIENT_JOINED.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Struct_pb.PlayerInfo.serializeBinaryToWriter
    );
  }
  f = message.getGroupid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Struct_pb.GroupID.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlayerInfo playerInfo = 1;
 * @return {?proto.Protocol.PlayerInfo}
 */
proto.Protocol.S_OTHER_CLIENT_JOINED.prototype.getPlayerinfo = function() {
  return /** @type{?proto.Protocol.PlayerInfo} */ (
    jspb.Message.getWrapperField(this, Struct_pb.PlayerInfo, 1));
};


/**
 * @param {?proto.Protocol.PlayerInfo|undefined} value
 * @return {!proto.Protocol.S_OTHER_CLIENT_JOINED} returns this
*/
proto.Protocol.S_OTHER_CLIENT_JOINED.prototype.setPlayerinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.S_OTHER_CLIENT_JOINED} returns this
 */
proto.Protocol.S_OTHER_CLIENT_JOINED.prototype.clearPlayerinfo = function() {
  return this.setPlayerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.S_OTHER_CLIENT_JOINED.prototype.hasPlayerinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GroupID groupID = 2;
 * @return {?proto.Protocol.GroupID}
 */
proto.Protocol.S_OTHER_CLIENT_JOINED.prototype.getGroupid = function() {
  return /** @type{?proto.Protocol.GroupID} */ (
    jspb.Message.getWrapperField(this, Struct_pb.GroupID, 2));
};


/**
 * @param {?proto.Protocol.GroupID|undefined} value
 * @return {!proto.Protocol.S_OTHER_CLIENT_JOINED} returns this
*/
proto.Protocol.S_OTHER_CLIENT_JOINED.prototype.setGroupid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.S_OTHER_CLIENT_JOINED} returns this
 */
proto.Protocol.S_OTHER_CLIENT_JOINED.prototype.clearGroupid = function() {
  return this.setGroupid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.S_OTHER_CLIENT_JOINED.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.C_ADD_NETWORK_OBJECTS.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.C_ADD_NETWORK_OBJECTS.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.C_ADD_NETWORK_OBJECTS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.C_ADD_NETWORK_OBJECTS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_ADD_NETWORK_OBJECTS.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectinfosList: jspb.Message.toObjectList(msg.getObjectinfosList(),
    Struct_pb.ObjectInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.C_ADD_NETWORK_OBJECTS}
 */
proto.Protocol.C_ADD_NETWORK_OBJECTS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.C_ADD_NETWORK_OBJECTS;
  return proto.Protocol.C_ADD_NETWORK_OBJECTS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.C_ADD_NETWORK_OBJECTS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.C_ADD_NETWORK_OBJECTS}
 */
proto.Protocol.C_ADD_NETWORK_OBJECTS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.ObjectInfo;
      reader.readMessage(value,Struct_pb.ObjectInfo.deserializeBinaryFromReader);
      msg.addObjectinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.C_ADD_NETWORK_OBJECTS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.C_ADD_NETWORK_OBJECTS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.C_ADD_NETWORK_OBJECTS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_ADD_NETWORK_OBJECTS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.ObjectInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ObjectInfo objectInfos = 1;
 * @return {!Array<!proto.Protocol.ObjectInfo>}
 */
proto.Protocol.C_ADD_NETWORK_OBJECTS.prototype.getObjectinfosList = function() {
  return /** @type{!Array<!proto.Protocol.ObjectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.ObjectInfo, 1));
};


/**
 * @param {!Array<!proto.Protocol.ObjectInfo>} value
 * @return {!proto.Protocol.C_ADD_NETWORK_OBJECTS} returns this
*/
proto.Protocol.C_ADD_NETWORK_OBJECTS.prototype.setObjectinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protocol.ObjectInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protocol.ObjectInfo}
 */
proto.Protocol.C_ADD_NETWORK_OBJECTS.prototype.addObjectinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protocol.ObjectInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protocol.C_ADD_NETWORK_OBJECTS} returns this
 */
proto.Protocol.C_ADD_NETWORK_OBJECTS.prototype.clearObjectinfosList = function() {
  return this.setObjectinfosList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.S_ADD_NETWORK_OBJECTS.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.S_ADD_NETWORK_OBJECTS.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.S_ADD_NETWORK_OBJECTS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.S_ADD_NETWORK_OBJECTS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_ADD_NETWORK_OBJECTS.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectinfosList: jspb.Message.toObjectList(msg.getObjectinfosList(),
    Struct_pb.ObjectInfo.toObject, includeInstance),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.S_ADD_NETWORK_OBJECTS}
 */
proto.Protocol.S_ADD_NETWORK_OBJECTS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.S_ADD_NETWORK_OBJECTS;
  return proto.Protocol.S_ADD_NETWORK_OBJECTS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.S_ADD_NETWORK_OBJECTS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.S_ADD_NETWORK_OBJECTS}
 */
proto.Protocol.S_ADD_NETWORK_OBJECTS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.ObjectInfo;
      reader.readMessage(value,Struct_pb.ObjectInfo.deserializeBinaryFromReader);
      msg.addObjectinfos(value);
      break;
    case 2:
      var value = /** @type {!proto.Protocol.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.S_ADD_NETWORK_OBJECTS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.S_ADD_NETWORK_OBJECTS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.S_ADD_NETWORK_OBJECTS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_ADD_NETWORK_OBJECTS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.ObjectInfo.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated ObjectInfo objectInfos = 1;
 * @return {!Array<!proto.Protocol.ObjectInfo>}
 */
proto.Protocol.S_ADD_NETWORK_OBJECTS.prototype.getObjectinfosList = function() {
  return /** @type{!Array<!proto.Protocol.ObjectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.ObjectInfo, 1));
};


/**
 * @param {!Array<!proto.Protocol.ObjectInfo>} value
 * @return {!proto.Protocol.S_ADD_NETWORK_OBJECTS} returns this
*/
proto.Protocol.S_ADD_NETWORK_OBJECTS.prototype.setObjectinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protocol.ObjectInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protocol.ObjectInfo}
 */
proto.Protocol.S_ADD_NETWORK_OBJECTS.prototype.addObjectinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protocol.ObjectInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protocol.S_ADD_NETWORK_OBJECTS} returns this
 */
proto.Protocol.S_ADD_NETWORK_OBJECTS.prototype.clearObjectinfosList = function() {
  return this.setObjectinfosList([]);
};


/**
 * optional Result result = 2;
 * @return {!proto.Protocol.Result}
 */
proto.Protocol.S_ADD_NETWORK_OBJECTS.prototype.getResult = function() {
  return /** @type {!proto.Protocol.Result} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Protocol.Result} value
 * @return {!proto.Protocol.S_ADD_NETWORK_OBJECTS} returns this
 */
proto.Protocol.S_ADD_NETWORK_OBJECTS.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.C_REMOVE_NETWORK_OBJECTS.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.C_REMOVE_NETWORK_OBJECTS.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.C_REMOVE_NETWORK_OBJECTS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.C_REMOVE_NETWORK_OBJECTS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_REMOVE_NETWORK_OBJECTS.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectinfosList: jspb.Message.toObjectList(msg.getObjectinfosList(),
    Struct_pb.ObjectInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.C_REMOVE_NETWORK_OBJECTS}
 */
proto.Protocol.C_REMOVE_NETWORK_OBJECTS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.C_REMOVE_NETWORK_OBJECTS;
  return proto.Protocol.C_REMOVE_NETWORK_OBJECTS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.C_REMOVE_NETWORK_OBJECTS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.C_REMOVE_NETWORK_OBJECTS}
 */
proto.Protocol.C_REMOVE_NETWORK_OBJECTS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.ObjectInfo;
      reader.readMessage(value,Struct_pb.ObjectInfo.deserializeBinaryFromReader);
      msg.addObjectinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.C_REMOVE_NETWORK_OBJECTS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.C_REMOVE_NETWORK_OBJECTS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.C_REMOVE_NETWORK_OBJECTS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_REMOVE_NETWORK_OBJECTS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.ObjectInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ObjectInfo objectInfos = 1;
 * @return {!Array<!proto.Protocol.ObjectInfo>}
 */
proto.Protocol.C_REMOVE_NETWORK_OBJECTS.prototype.getObjectinfosList = function() {
  return /** @type{!Array<!proto.Protocol.ObjectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.ObjectInfo, 1));
};


/**
 * @param {!Array<!proto.Protocol.ObjectInfo>} value
 * @return {!proto.Protocol.C_REMOVE_NETWORK_OBJECTS} returns this
*/
proto.Protocol.C_REMOVE_NETWORK_OBJECTS.prototype.setObjectinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protocol.ObjectInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protocol.ObjectInfo}
 */
proto.Protocol.C_REMOVE_NETWORK_OBJECTS.prototype.addObjectinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protocol.ObjectInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protocol.C_REMOVE_NETWORK_OBJECTS} returns this
 */
proto.Protocol.C_REMOVE_NETWORK_OBJECTS.prototype.clearObjectinfosList = function() {
  return this.setObjectinfosList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.S_REMOVE_NETWORK_OBJECTS.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.S_REMOVE_NETWORK_OBJECTS.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.S_REMOVE_NETWORK_OBJECTS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.S_REMOVE_NETWORK_OBJECTS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_REMOVE_NETWORK_OBJECTS.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectinfosList: jspb.Message.toObjectList(msg.getObjectinfosList(),
    Struct_pb.ObjectInfo.toObject, includeInstance),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.S_REMOVE_NETWORK_OBJECTS}
 */
proto.Protocol.S_REMOVE_NETWORK_OBJECTS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.S_REMOVE_NETWORK_OBJECTS;
  return proto.Protocol.S_REMOVE_NETWORK_OBJECTS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.S_REMOVE_NETWORK_OBJECTS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.S_REMOVE_NETWORK_OBJECTS}
 */
proto.Protocol.S_REMOVE_NETWORK_OBJECTS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.ObjectInfo;
      reader.readMessage(value,Struct_pb.ObjectInfo.deserializeBinaryFromReader);
      msg.addObjectinfos(value);
      break;
    case 2:
      var value = /** @type {!proto.Protocol.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.S_REMOVE_NETWORK_OBJECTS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.S_REMOVE_NETWORK_OBJECTS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.S_REMOVE_NETWORK_OBJECTS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_REMOVE_NETWORK_OBJECTS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.ObjectInfo.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated ObjectInfo objectInfos = 1;
 * @return {!Array<!proto.Protocol.ObjectInfo>}
 */
proto.Protocol.S_REMOVE_NETWORK_OBJECTS.prototype.getObjectinfosList = function() {
  return /** @type{!Array<!proto.Protocol.ObjectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.ObjectInfo, 1));
};


/**
 * @param {!Array<!proto.Protocol.ObjectInfo>} value
 * @return {!proto.Protocol.S_REMOVE_NETWORK_OBJECTS} returns this
*/
proto.Protocol.S_REMOVE_NETWORK_OBJECTS.prototype.setObjectinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protocol.ObjectInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protocol.ObjectInfo}
 */
proto.Protocol.S_REMOVE_NETWORK_OBJECTS.prototype.addObjectinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protocol.ObjectInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protocol.S_REMOVE_NETWORK_OBJECTS} returns this
 */
proto.Protocol.S_REMOVE_NETWORK_OBJECTS.prototype.clearObjectinfosList = function() {
  return this.setObjectinfosList([]);
};


/**
 * optional Result result = 2;
 * @return {!proto.Protocol.Result}
 */
proto.Protocol.S_REMOVE_NETWORK_OBJECTS.prototype.getResult = function() {
  return /** @type {!proto.Protocol.Result} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Protocol.Result} value
 * @return {!proto.Protocol.S_REMOVE_NETWORK_OBJECTS} returns this
 */
proto.Protocol.S_REMOVE_NETWORK_OBJECTS.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.C_UPDATE_NETWORK_OBJECTS.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.C_UPDATE_NETWORK_OBJECTS.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.C_UPDATE_NETWORK_OBJECTS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.C_UPDATE_NETWORK_OBJECTS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_UPDATE_NETWORK_OBJECTS.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectinfosList: jspb.Message.toObjectList(msg.getObjectinfosList(),
    Struct_pb.ObjectInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.C_UPDATE_NETWORK_OBJECTS}
 */
proto.Protocol.C_UPDATE_NETWORK_OBJECTS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.C_UPDATE_NETWORK_OBJECTS;
  return proto.Protocol.C_UPDATE_NETWORK_OBJECTS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.C_UPDATE_NETWORK_OBJECTS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.C_UPDATE_NETWORK_OBJECTS}
 */
proto.Protocol.C_UPDATE_NETWORK_OBJECTS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.ObjectInfo;
      reader.readMessage(value,Struct_pb.ObjectInfo.deserializeBinaryFromReader);
      msg.addObjectinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.C_UPDATE_NETWORK_OBJECTS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.C_UPDATE_NETWORK_OBJECTS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.C_UPDATE_NETWORK_OBJECTS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_UPDATE_NETWORK_OBJECTS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.ObjectInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ObjectInfo objectInfos = 1;
 * @return {!Array<!proto.Protocol.ObjectInfo>}
 */
proto.Protocol.C_UPDATE_NETWORK_OBJECTS.prototype.getObjectinfosList = function() {
  return /** @type{!Array<!proto.Protocol.ObjectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.ObjectInfo, 1));
};


/**
 * @param {!Array<!proto.Protocol.ObjectInfo>} value
 * @return {!proto.Protocol.C_UPDATE_NETWORK_OBJECTS} returns this
*/
proto.Protocol.C_UPDATE_NETWORK_OBJECTS.prototype.setObjectinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protocol.ObjectInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protocol.ObjectInfo}
 */
proto.Protocol.C_UPDATE_NETWORK_OBJECTS.prototype.addObjectinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protocol.ObjectInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protocol.C_UPDATE_NETWORK_OBJECTS} returns this
 */
proto.Protocol.C_UPDATE_NETWORK_OBJECTS.prototype.clearObjectinfosList = function() {
  return this.setObjectinfosList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.S_UPDATE_NETWORK_OBJECTS.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.S_UPDATE_NETWORK_OBJECTS.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.S_UPDATE_NETWORK_OBJECTS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.S_UPDATE_NETWORK_OBJECTS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_UPDATE_NETWORK_OBJECTS.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectinfosList: jspb.Message.toObjectList(msg.getObjectinfosList(),
    Struct_pb.ObjectInfo.toObject, includeInstance),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.S_UPDATE_NETWORK_OBJECTS}
 */
proto.Protocol.S_UPDATE_NETWORK_OBJECTS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.S_UPDATE_NETWORK_OBJECTS;
  return proto.Protocol.S_UPDATE_NETWORK_OBJECTS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.S_UPDATE_NETWORK_OBJECTS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.S_UPDATE_NETWORK_OBJECTS}
 */
proto.Protocol.S_UPDATE_NETWORK_OBJECTS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.ObjectInfo;
      reader.readMessage(value,Struct_pb.ObjectInfo.deserializeBinaryFromReader);
      msg.addObjectinfos(value);
      break;
    case 2:
      var value = /** @type {!proto.Protocol.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.S_UPDATE_NETWORK_OBJECTS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.S_UPDATE_NETWORK_OBJECTS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.S_UPDATE_NETWORK_OBJECTS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_UPDATE_NETWORK_OBJECTS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.ObjectInfo.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated ObjectInfo objectInfos = 1;
 * @return {!Array<!proto.Protocol.ObjectInfo>}
 */
proto.Protocol.S_UPDATE_NETWORK_OBJECTS.prototype.getObjectinfosList = function() {
  return /** @type{!Array<!proto.Protocol.ObjectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.ObjectInfo, 1));
};


/**
 * @param {!Array<!proto.Protocol.ObjectInfo>} value
 * @return {!proto.Protocol.S_UPDATE_NETWORK_OBJECTS} returns this
*/
proto.Protocol.S_UPDATE_NETWORK_OBJECTS.prototype.setObjectinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protocol.ObjectInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protocol.ObjectInfo}
 */
proto.Protocol.S_UPDATE_NETWORK_OBJECTS.prototype.addObjectinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protocol.ObjectInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protocol.S_UPDATE_NETWORK_OBJECTS} returns this
 */
proto.Protocol.S_UPDATE_NETWORK_OBJECTS.prototype.clearObjectinfosList = function() {
  return this.setObjectinfosList([]);
};


/**
 * optional Result result = 2;
 * @return {!proto.Protocol.Result}
 */
proto.Protocol.S_UPDATE_NETWORK_OBJECTS.prototype.getResult = function() {
  return /** @type {!proto.Protocol.Result} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Protocol.Result} value
 * @return {!proto.Protocol.S_UPDATE_NETWORK_OBJECTS} returns this
 */
proto.Protocol.S_UPDATE_NETWORK_OBJECTS.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.C_CHANGE_OBJECTS_OWNER.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.C_CHANGE_OBJECTS_OWNER.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.C_CHANGE_OBJECTS_OWNER.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.C_CHANGE_OBJECTS_OWNER} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_CHANGE_OBJECTS_OWNER.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectinfosList: jspb.Message.toObjectList(msg.getObjectinfosList(),
    Struct_pb.ObjectInfo.toObject, includeInstance),
    newownerplayerid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.C_CHANGE_OBJECTS_OWNER}
 */
proto.Protocol.C_CHANGE_OBJECTS_OWNER.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.C_CHANGE_OBJECTS_OWNER;
  return proto.Protocol.C_CHANGE_OBJECTS_OWNER.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.C_CHANGE_OBJECTS_OWNER} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.C_CHANGE_OBJECTS_OWNER}
 */
proto.Protocol.C_CHANGE_OBJECTS_OWNER.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.ObjectInfo;
      reader.readMessage(value,Struct_pb.ObjectInfo.deserializeBinaryFromReader);
      msg.addObjectinfos(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNewownerplayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.C_CHANGE_OBJECTS_OWNER.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.C_CHANGE_OBJECTS_OWNER.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.C_CHANGE_OBJECTS_OWNER} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_CHANGE_OBJECTS_OWNER.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.ObjectInfo.serializeBinaryToWriter
    );
  }
  f = message.getNewownerplayerid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated ObjectInfo objectInfos = 1;
 * @return {!Array<!proto.Protocol.ObjectInfo>}
 */
proto.Protocol.C_CHANGE_OBJECTS_OWNER.prototype.getObjectinfosList = function() {
  return /** @type{!Array<!proto.Protocol.ObjectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.ObjectInfo, 1));
};


/**
 * @param {!Array<!proto.Protocol.ObjectInfo>} value
 * @return {!proto.Protocol.C_CHANGE_OBJECTS_OWNER} returns this
*/
proto.Protocol.C_CHANGE_OBJECTS_OWNER.prototype.setObjectinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protocol.ObjectInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protocol.ObjectInfo}
 */
proto.Protocol.C_CHANGE_OBJECTS_OWNER.prototype.addObjectinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protocol.ObjectInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protocol.C_CHANGE_OBJECTS_OWNER} returns this
 */
proto.Protocol.C_CHANGE_OBJECTS_OWNER.prototype.clearObjectinfosList = function() {
  return this.setObjectinfosList([]);
};


/**
 * optional uint64 newOwnerPlayerID = 2;
 * @return {number}
 */
proto.Protocol.C_CHANGE_OBJECTS_OWNER.prototype.getNewownerplayerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protocol.C_CHANGE_OBJECTS_OWNER} returns this
 */
proto.Protocol.C_CHANGE_OBJECTS_OWNER.prototype.setNewownerplayerid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protocol.S_CHANGE_OBJECTS_OWNER.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.S_CHANGE_OBJECTS_OWNER.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.S_CHANGE_OBJECTS_OWNER.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.S_CHANGE_OBJECTS_OWNER} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_CHANGE_OBJECTS_OWNER.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectinfosList: jspb.Message.toObjectList(msg.getObjectinfosList(),
    Struct_pb.ObjectInfo.toObject, includeInstance),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.S_CHANGE_OBJECTS_OWNER}
 */
proto.Protocol.S_CHANGE_OBJECTS_OWNER.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.S_CHANGE_OBJECTS_OWNER;
  return proto.Protocol.S_CHANGE_OBJECTS_OWNER.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.S_CHANGE_OBJECTS_OWNER} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.S_CHANGE_OBJECTS_OWNER}
 */
proto.Protocol.S_CHANGE_OBJECTS_OWNER.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.ObjectInfo;
      reader.readMessage(value,Struct_pb.ObjectInfo.deserializeBinaryFromReader);
      msg.addObjectinfos(value);
      break;
    case 2:
      var value = /** @type {!proto.Protocol.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.S_CHANGE_OBJECTS_OWNER.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.S_CHANGE_OBJECTS_OWNER.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.S_CHANGE_OBJECTS_OWNER} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_CHANGE_OBJECTS_OWNER.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Struct_pb.ObjectInfo.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated ObjectInfo objectInfos = 1;
 * @return {!Array<!proto.Protocol.ObjectInfo>}
 */
proto.Protocol.S_CHANGE_OBJECTS_OWNER.prototype.getObjectinfosList = function() {
  return /** @type{!Array<!proto.Protocol.ObjectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, Struct_pb.ObjectInfo, 1));
};


/**
 * @param {!Array<!proto.Protocol.ObjectInfo>} value
 * @return {!proto.Protocol.S_CHANGE_OBJECTS_OWNER} returns this
*/
proto.Protocol.S_CHANGE_OBJECTS_OWNER.prototype.setObjectinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protocol.ObjectInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protocol.ObjectInfo}
 */
proto.Protocol.S_CHANGE_OBJECTS_OWNER.prototype.addObjectinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protocol.ObjectInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protocol.S_CHANGE_OBJECTS_OWNER} returns this
 */
proto.Protocol.S_CHANGE_OBJECTS_OWNER.prototype.clearObjectinfosList = function() {
  return this.setObjectinfosList([]);
};


/**
 * optional Result result = 2;
 * @return {!proto.Protocol.Result}
 */
proto.Protocol.S_CHANGE_OBJECTS_OWNER.prototype.getResult = function() {
  return /** @type {!proto.Protocol.Result} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Protocol.Result} value
 * @return {!proto.Protocol.S_CHANGE_OBJECTS_OWNER} returns this
 */
proto.Protocol.S_CHANGE_OBJECTS_OWNER.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.C_CHAT.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.C_CHAT.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.C_CHAT} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_CHAT.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.C_CHAT}
 */
proto.Protocol.C_CHAT.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.C_CHAT;
  return proto.Protocol.C_CHAT.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.C_CHAT} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.C_CHAT}
 */
proto.Protocol.C_CHAT.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.C_CHAT.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.C_CHAT.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.C_CHAT} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.C_CHAT.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string msg = 1;
 * @return {string}
 */
proto.Protocol.C_CHAT.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.C_CHAT} returns this
 */
proto.Protocol.C_CHAT.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.S_CHAT.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.S_CHAT.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.S_CHAT} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_CHAT.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerinfo: (f = msg.getPlayerinfo()) && Struct_pb.PlayerInfo.toObject(includeInstance, f),
    msg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    result: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.S_CHAT}
 */
proto.Protocol.S_CHAT.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.S_CHAT;
  return proto.Protocol.S_CHAT.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.S_CHAT} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.S_CHAT}
 */
proto.Protocol.S_CHAT.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Struct_pb.PlayerInfo;
      reader.readMessage(value,Struct_pb.PlayerInfo.deserializeBinaryFromReader);
      msg.setPlayerinfo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {!proto.Protocol.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.S_CHAT.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.S_CHAT.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.S_CHAT} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.S_CHAT.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Struct_pb.PlayerInfo.serializeBinaryToWriter
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional PlayerInfo playerInfo = 1;
 * @return {?proto.Protocol.PlayerInfo}
 */
proto.Protocol.S_CHAT.prototype.getPlayerinfo = function() {
  return /** @type{?proto.Protocol.PlayerInfo} */ (
    jspb.Message.getWrapperField(this, Struct_pb.PlayerInfo, 1));
};


/**
 * @param {?proto.Protocol.PlayerInfo|undefined} value
 * @return {!proto.Protocol.S_CHAT} returns this
*/
proto.Protocol.S_CHAT.prototype.setPlayerinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol.S_CHAT} returns this
 */
proto.Protocol.S_CHAT.prototype.clearPlayerinfo = function() {
  return this.setPlayerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.S_CHAT.prototype.hasPlayerinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.Protocol.S_CHAT.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Protocol.S_CHAT} returns this
 */
proto.Protocol.S_CHAT.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Result result = 3;
 * @return {!proto.Protocol.Result}
 */
proto.Protocol.S_CHAT.prototype.getResult = function() {
  return /** @type {!proto.Protocol.Result} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Protocol.Result} value
 * @return {!proto.Protocol.S_CHAT} returns this
 */
proto.Protocol.S_CHAT.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


goog.object.extend(exports, proto.Protocol);
